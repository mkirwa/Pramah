{"ast":null,"code":"var _jsxFileName = \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/userforms/userform.jsx\";\nimport React, { Component } from \"react\";\nimport Loads from \"../loads\";\nimport FormUserDetails from \"./formuserdetails\";\nimport FormPersonalDetails from \"./formpersonaldetails\";\nimport Confirm from \"./confirm\";\nimport Success from \"./success\";\n\nclass UserForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      step: 1,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      streetAddress: \"\",\n      apt: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      sSN: \"\",\n      drivingLicense: \"\",\n      age: \"\",\n      errors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        streetAddress: \"\",\n        apt: \"\",\n        city: \"\",\n        state: \"\",\n        zipCode: \"\",\n        sSN: \"\",\n        drivingLicense: \"\",\n        age: \"\"\n      }\n    };\n\n    this.nextStep = () => {\n      const step = this.state.step;\n      this.setState({\n        step: step + 1\n      });\n    };\n\n    this.prevStep = () => {\n      const step = this.state.step;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.handleChange = input => e => {\n      //take whatever the input is\n      //set it to whatever the value is\n      //we can get that using the event parameter and using target.value\n      //be it firstName, lastName, whatever value is entered\n      this.setState({\n        [input]: e.target.value\n      });\n    };\n\n    this.handleValidation = () => {\n      const _this$state = this.state,\n            firstName = _this$state.firstName,\n            lastName = _this$state.lastName,\n            streetAddress = _this$state.streetAddress,\n            email = _this$state.email,\n            apt = _this$state.apt,\n            city = _this$state.city,\n            state = _this$state.state,\n            zipCode = _this$state.zipCode,\n            sSN = _this$state.sSN,\n            drivingLicense = _this$state.drivingLicense,\n            age = _this$state.age;\n      let errors = {\n        firstName: \"\",\n        lastName: \"\",\n        streetAddress: \"\",\n        email: \"\",\n        streetAddress: \"\",\n        apt: \"\",\n        city: \"\",\n        state: \"\",\n        zipCode: \"\",\n        sSN: \"\",\n        drivingLicense: \"\",\n        age: \"\"\n      };\n\n      if (!firstName) {\n        errors.firstName = \"Name is required\"; //} else if (isNaN(price)) {\n        //errors.price = \"Price must be a number\";\n        //}\n        // if (!downP) {\n        // errors.downP = \"Down Payment is required\";\n        //}\n        // Rest of validation conditions go here...\n\n        this.setState({\n          errors\n        });\n      }\n    };\n  }\n\n  //figure out what\n  //step we are on and depending on what step we are on\n  //that's going to decide on which component we want to display\n  render() {\n    //pull the step out of the state by destructuring\n    const step = this.state.step;\n    const _this$state2 = this.state,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          streetAddress = _this$state2.streetAddress,\n          email = _this$state2.email,\n          apt = _this$state2.apt,\n          city = _this$state2.city,\n          state = _this$state2.state,\n          zipCode = _this$state2.zipCode,\n          sSN = _this$state2.sSN,\n          drivingLicense = _this$state2.drivingLicense,\n          age = _this$state2.age; //this is how we can pass the values into the components and\n    //render them into the inputs\n\n    const values = {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age\n    }; //we are making a case for each number so we use a switch instead\n    //of return\n\n    switch (step) {\n      //case 1 returns the form user details component\n      case 1:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(FormUserDetails, {\n            nextStep: this.nextStep,\n            handleChange: this.handleChange,\n            values: values,\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          })\n        );\n\n      case 2:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(FormPersonalDetails, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            handleChange: this.handleChange,\n            values: values,\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          })\n        );\n\n      case 3:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(Confirm, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            values: values,\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          })\n        );\n\n      case 4:\n        return React.createElement(Success, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        });\n    }\n  }\n\n}\n\nconst styles = {\n  button: {\n    margin: 15\n  }\n};\nexport default UserForm;","map":{"version":3,"sources":["/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/userforms/userform.jsx"],"names":["React","Component","Loads","FormUserDetails","FormPersonalDetails","Confirm","Success","UserForm","state","step","firstName","lastName","email","streetAddress","apt","city","zipCode","sSN","drivingLicense","age","errors","nextStep","setState","prevStep","handleChange","input","e","target","value","handleValidation","render","values","styles","button","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Loads from \"../loads\";\nimport FormUserDetails from \"./formuserdetails\";\nimport FormPersonalDetails from \"./formpersonaldetails\";\nimport Confirm from \"./confirm\";\nimport Success from \"./success\";\n\nclass UserForm extends Component {\n  state = {\n    step: 1,\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    streetAddress: \"\",\n    apt: \"\",\n    city: \"\",\n    state: \"\",\n    zipCode: \"\",\n    sSN: \"\",\n    drivingLicense: \"\",\n    age: \"\",\n    errors: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      streetAddress: \"\",\n      apt: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      sSN: \"\",\n      drivingLicense: \"\",\n      age: \"\",\n    },\n  };\n\n  //has a method to proceed to the next step\n  nextStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step + 1,\n    });\n  };\n\n  //go back to previous step\n  prevStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step - 1,\n    });\n  };\n\n  //handle fields change\n  //each input will have their own state which would be the firstName etc\n  //event parameter attached to it\n  handleChange = (input) => (e) => {\n    //take whatever the input is\n    //set it to whatever the value is\n    //we can get that using the event parameter and using target.value\n    //be it firstName, lastName, whatever value is entered\n    this.setState({ [input]: e.target.value });\n  };\n\n  handleValidation = () => {\n    const {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age,\n    } = this.state;\n    let errors = {\n      firstName: \"\",\n      lastName: \"\",\n      streetAddress: \"\",\n      email: \"\",\n      streetAddress: \"\",\n      apt: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      sSN: \"\",\n      drivingLicense: \"\",\n      age: \"\",\n    };\n\n    if (!firstName) {\n      errors.firstName = \"Name is required\";\n      //} else if (isNaN(price)) {\n      //errors.price = \"Price must be a number\";\n      //}\n\n      // if (!downP) {\n      // errors.downP = \"Down Payment is required\";\n      //}\n\n      // Rest of validation conditions go here...\n\n      this.setState({ errors });\n    }\n  };\n\n  //figure out what\n  //step we are on and depending on what step we are on\n  //that's going to decide on which component we want to display\n  render() {\n    //pull the step out of the state by destructuring\n    const { step } = this.state;\n    const {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age,\n    } = this.state;\n    //this is how we can pass the values into the components and\n    //render them into the inputs\n    const values = {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age,\n    };\n\n    //we are making a case for each number so we use a switch instead\n    //of return\n    switch (step) {\n      //case 1 returns the form user details component\n      case 1:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <FormUserDetails\n            nextStep={this.nextStep}\n            handleChange={this.handleChange}\n            values={values}\n            styles={styles}\n          />\n        );\n      case 2:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <FormPersonalDetails\n            nextStep={this.nextStep}\n            prevStep={this.prevStep}\n            handleChange={this.handleChange}\n            values={values}\n            styles={styles}\n          />\n        );\n      case 3:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <Confirm\n            nextStep={this.nextStep}\n            prevStep={this.prevStep}\n            values={values}\n            styles={styles}\n          />\n        );\n      case 4:\n        return <Success />;\n    }\n  }\n}\n\nconst styles = {\n  button: {\n    margin: 15,\n  },\n};\n\nexport default UserForm;\n"]},"metadata":{},"sourceType":"module"}
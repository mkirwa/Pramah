{"ast":null,"code":"import _objectSpread from \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/App.js\";\nimport React from 'react';\nimport NavBar from './components/navbar';\nimport Allcomponents from './components/allcomponents';\nimport FormSearch from './components/formsearch';\nimport './App.css';\n\nclass App extends Allcomponents {\n  //1st lifecycle hooks \n  constructor(props) {\n    super(props);\n    this.state = {\n      //instead of hard coding all the counters in the render method\n      //div section, \n      //just use an array instead and render them using the map method\n      //array will have counter objects\n      //add a new property allcomponents\n      // Use this to uniquely identify each\n      //counter\n      allcomponents: [//counter objects\n      //we use id to uniquely identify each counter \n      //value property sets the intial value for each counter\n      {\n        id: 1,\n        value: 4\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }]\n    };\n\n    this.handleIncrement = counter => {\n      //creating a new counters array and giving it\n      //to the set state method and have react update \n      //the state\n      //... this is the spread operator clones \n      //this.state.allcomponents\n      //with these, you will get a new array of counters\n      //the object in the new array(counters) are the same\n      //objects we have in allcomponents\n      const counters = [...this.state.allcomponents];\n      const index = counters.indexOf(counter);\n      counters[index] = _objectSpread({}, counter);\n      counters[index].value++;\n      this.setState({\n        allcomponents: counters\n      });\n    };\n\n    this.handleReset = () => {\n      //this.state.allcomponents - this refers to the existing\n      //counters \n      //we use the map method to get each counter and reset\n      //its value to zero and then return it\n      //this give you a new array of counters\n      //You store them in counters. \n      //\n      const counters = this.state.allcomponents.map(c => {\n        c.value = 0;\n        return c;\n      }); //here you call this.setState with this new array\n\n      this.setState({\n        allcomponents: counters\n      });\n    };\n\n    this.handleDelete = counterId => {\n      const counters = this.state.allcomponents.filter(c => c.id !== counterId);\n      this.setState({\n        allcomponents: counters\n      });\n    };\n\n    console.log('App-Constructor', this.props);\n  } //2nd lifecycle hooks\n  //called after the component is rendered into the DOM\n  //this is the perfect place to make Ajax calls to get data from the server\n\n\n  componentDidMount() {//ajax call\n    //this.setState({ movies});\n  }\n\n  render() {\n    //render method\n    console.log('App-rendered');\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      totalCounters: this.state.allcomponents.filter(c => c.value > 0).length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Allcomponents, {\n      counters: this.state.allcomponents,\n      onReset: this.handleReset,\n      onIncrement: this.handleIncrement,\n      onDelete: this.handleDelete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/App.js"],"names":["React","NavBar","Allcomponents","FormSearch","App","constructor","props","state","allcomponents","id","value","handleIncrement","counter","counters","index","indexOf","setState","handleReset","map","c","handleDelete","counterId","filter","console","log","componentDidMount","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport NavBar from './components/navbar';\nimport Allcomponents from './components/allcomponents';\nimport FormSearch from './components/formsearch'\n\n\nimport './App.css';\n\nclass App extends Allcomponents{\n\n  state = { \n    //instead of hard coding all the counters in the render method\n    //div section, \n    //just use an array instead and render them using the map method\n    //array will have counter objects\n    //add a new property allcomponents\n    // Use this to uniquely identify each\n    //counter\n    allcomponents:[\n        //counter objects\n        //we use id to uniquely identify each counter \n        //value property sets the intial value for each counter\n        { id:1, value:4 },\n        { id:2, value:0 },\n        { id:3, value:0 },\n        { id:4, value:0 },\n    ]\n    \n };\n//1st lifecycle hooks \nconstructor(props){\n    super(props);\n    console.log('App-Constructor', this.props);\n}\n\n//2nd lifecycle hooks\n//called after the component is rendered into the DOM\n//this is the perfect place to make Ajax calls to get data from the server\n\ncomponentDidMount(){\n  //ajax call\n  //this.setState({ movies});\n}\n\nhandleIncrement = counter =>{\n    //creating a new counters array and giving it\n    //to the set state method and have react update \n    //the state\n    //... this is the spread operator clones \n    //this.state.allcomponents\n    //with these, you will get a new array of counters\n    //the object in the new array(counters) are the same\n    //objects we have in allcomponents\n    const counters = [...this.state.allcomponents]\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    this.setState({allcomponents: counters});\n};\n\nhandleReset = () =>{\n    //this.state.allcomponents - this refers to the existing\n    //counters \n    //we use the map method to get each counter and reset\n    //its value to zero and then return it\n    //this give you a new array of counters\n    //You store them in counters. \n    //\n    const counters = this.state.allcomponents.map(c=>{\n        c.value = 0;\n        return c;\n    });\n    //here you call this.setState with this new array\n    this.setState({ allcomponents: counters})\n};\n\nhandleDelete = (counterId)=>{\n    const counters = this.state.allcomponents.filter(c => c.id !==counterId);\n    this.setState({ allcomponents: counters})\n}\n\n\n  render(){\n    //render method\n    console.log('App-rendered');\n    \n  return (\n    \n    <React.Fragment>\n      <NavBar totalCounters={this.state.allcomponents.filter(c => c.value>0).length}/>\n      <main className=\"container\">\n        <Allcomponents \n          counters={this.state.allcomponents}\n          onReset={this.handleReset} \n          onIncrement={this.handleIncrement}\n          onDelete={this.handleDelete}\n          />\n        \n      </main>\n    </React.Fragment>\n  );\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/counter.jsx\";\nimport React, { Component } from 'react'; //component class has methods that will be inherited in counter class\n\nclass Counter extends Component {\n  //this component is called after a component is updated\n  //this means we have new state or new props\n  //this means we can compare this new state with the old state\n  //or the new props with the old props and if there's a change, we can make ajax\n  //request to get new data from the server \n  //if there are no changes, perhaps we don't want to make an additional ajax\n  //request this is an optimization technique\n  componentDidUpdate(prevProps, prevState) {\n    console.log('prevProps', prevProps);\n    console.log('prevState', prevState);\n\n    if (prevProps.counter.value !== this.props.counter.value) {//Ajax call and get new data from the server \n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter - Unmount\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: this.getBadgeClasses(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, this.formatCount()), React.createElement(\"button\", {\n      onClick: () => this.props.onIncrement(this.props.counter),\n      className: \"btn btn-secondary btn-sm.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Increment\"), React.createElement(\"button\", {\n      onClick: () => this.props.onDelete(this.props.counter.id),\n      className: \"btn btn-danger btn-sm m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Delete\"));\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const value = this.props.counter.value; //You can also return a jsx expression here\n\n    return value === 0 ? \"Zero\" : value;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/counter.jsx"],"names":["React","Component","Counter","componentDidUpdate","prevProps","prevState","console","log","counter","value","props","componentWillUnmount","render","getBadgeClasses","formatCount","onIncrement","onDelete","id","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,SAAxB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBF,SAAxB;;AACA,QAAGD,SAAS,CAACI,OAAV,CAAkBC,KAAlB,KAA4B,KAAKC,KAAL,CAAWF,OAAX,CAAmBC,KAAlD,EAAwD,CACpD;AACH;AACJ;;AAEDE,EAAAA,oBAAoB,GAAE;AAClBL,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C,KAAKC,WAAL,EAA1C,CADJ,EAEI;AACA,MAAA,OAAO,EAAE,MAAK,KAAKJ,KAAL,CAAWK,WAAX,CAAuB,KAAKL,KAAL,CAAWF,OAAlC,CADd;AAEA,MAAA,SAAS,EAAC,2BAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAOI;AAAQ,MAAA,OAAO,EAAG,MAAM,KAAKE,KAAL,CAAWM,QAAX,CAAoB,KAAKN,KAAL,CAAWF,OAAX,CAAmBS,EAAvC,CAAxB;AAAoE,MAAA,SAAS,EAAC,2BAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,CADJ;AAWH;;AACDJ,EAAAA,eAAe,GAAG;AACd,QAAIK,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKR,KAAL,CAAWF,OAAX,CAAmBC,KAAnB,KAA6B,CAA7B,GAAgC,SAAhC,GAA4C,SAAvD;AACA,WAAOS,OAAP;AACH;;AACDJ,EAAAA,WAAW,GAAE;AAAA,UACFL,KADE,GACO,KAAKC,KAAL,CAAWF,OADlB,CACFC,KADE,EAEZ;;AACE,WAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAqBA,KAA5B;AACF;;AA1C2B;;AA6ChC,eAAeP,OAAf","sourcesContent":["import React, { Component } from 'react';\n//component class has methods that will be inherited in counter class\nclass Counter extends Component {  \n    //this component is called after a component is updated\n    //this means we have new state or new props\n    //this means we can compare this new state with the old state\n    //or the new props with the old props and if there's a change, we can make ajax\n    //request to get new data from the server \n    //if there are no changes, perhaps we don't want to make an additional ajax\n    //request this is an optimization technique\n    componentDidUpdate(prevProps, prevState){\n        console.log('prevProps',prevProps); \n        console.log('prevState',prevState);\n        if(prevProps.counter.value !== this.props.counter.value){\n            //Ajax call and get new data from the server \n        }\n    }\n\n    componentWillUnmount(){\n        console.log(\"Counter - Unmount\");\n    }\n\n    render() { \n        return(\n            <div>\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n                <button \n                onClick={()=> this.props.onIncrement(this.props.counter)} \n                className=\"btn btn-secondary btn-sm.\">\n                    Increment\n                </button>\n                <button onClick={ () => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button>\n            </div>\n            );\n    }\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.props.counter.value === 0? \"warning\" : \"primary\";\n        return classes; \n    }\n    formatCount(){\n        const {value} = this.props.counter;\n     //You can also return a jsx expression here\n       return value === 0 ? \"Zero\":value;\n    }\n \n} \nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}
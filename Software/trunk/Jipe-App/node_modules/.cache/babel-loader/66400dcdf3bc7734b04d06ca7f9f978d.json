{"ast":null,"code":"var _jsxFileName = \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/userforms/userform.jsx\";\nimport React, { Component } from \"react\";\nimport Loads from \"../loads\";\nimport FormUserDetails from \"./formuserdetails\";\nimport FormPersonalDetails from \"./formpersonaldetails\";\n\nclass UserForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      step: 1,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      occupation: \"\",\n      city: \"\",\n      bio: \"\"\n    };\n\n    this.nextStep = () => {\n      const step = this.state.step;\n      this.setState({\n        step: step + 1\n      });\n    };\n\n    this.prevStep = () => {\n      const step = this.state.step;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.handleChange = input => e => {\n      //take whatever the input is\n      //set it to whatever the value is\n      //we can get that using the event parameter and using target.value\n      //be it firstName, lastName, whatever value is entered\n      this.setState({\n        [input]: e.target.value\n      });\n    };\n  }\n\n  //figure out what step we are on and depending on what step we are on\n  //that's going to decide on which component we want to display\n  render() {\n    //pull the step out of the state by destructuring\n    const step = this.state.step;\n    const _this$state = this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          email = _this$state.email,\n          occupation = _this$state.occupation,\n          city = _this$state.city,\n          bio = _this$state.bio; //this is how we can pass the values into the components and\n    //render them into the inputs\n\n    const values = {\n      firstName,\n      lastName,\n      email,\n      occupation,\n      city,\n      bio\n    }; //we are making a case for each number so we use a switch instead\n    //of return\n\n    switch (step) {\n      //case 1 returns the form user details component\n      case 1:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(FormUserDetails, {\n            nextStep: this.nextStep,\n            handleChange: this.handleChange,\n            values: values,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          })\n        );\n\n      case 2:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(FormPersonalDetails, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            handleChange: this.handleChange,\n            values: values,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          })\n        );\n\n      case 3:\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"Confirm\");\n\n      case 4:\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"Success\");\n    }\n  }\n\n}\n\nexport default UserForm;","map":{"version":3,"sources":["/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/userforms/userform.jsx"],"names":["React","Component","Loads","FormUserDetails","FormPersonalDetails","UserForm","state","step","firstName","lastName","email","occupation","city","bio","nextStep","setState","prevStep","handleChange","input","e","target","value","render","values"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BK,KAD+B,GACvB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,SAAS,EAAE,EAFL;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,KAAK,EAAE,EAJD;AAKNC,MAAAA,UAAU,EAAE,EALN;AAMNC,MAAAA,IAAI,EAAE,EANA;AAONC,MAAAA,GAAG,EAAE;AAPC,KADuB;;AAAA,SAY/BC,QAZ+B,GAYpB,MAAM;AAAA,YACPP,IADO,GACE,KAAKD,KADP,CACPC,IADO;AAEf,WAAKQ,QAAL,CAAc;AACZR,QAAAA,IAAI,EAAEA,IAAI,GAAG;AADD,OAAd;AAGD,KAjB8B;;AAAA,SAoB/BS,QApB+B,GAoBpB,MAAM;AAAA,YACPT,IADO,GACE,KAAKD,KADP,CACPC,IADO;AAEf,WAAKQ,QAAL,CAAc;AACZR,QAAAA,IAAI,EAAEA,IAAI,GAAG;AADD,OAAd;AAGD,KAzB8B;;AAAA,SA8B/BU,YA9B+B,GA8BhBC,KAAK,IAAIC,CAAC,IAAI;AAC3B;AACA;AACA;AACA;AACA,WAAKJ,QAAL,CAAc;AAAE,SAACG,KAAD,GAASC,CAAC,CAACC,MAAF,CAASC;AAApB,OAAd;AACD,KApC8B;AAAA;;AAsC/B;AACA;AACAC,EAAAA,MAAM,GAAG;AACP;AADO,UAECf,IAFD,GAEU,KAAKD,KAFf,CAECC,IAFD;AAAA,wBAGuD,KAAKD,KAH5D;AAAA,UAGCE,SAHD,eAGCA,SAHD;AAAA,UAGYC,QAHZ,eAGYA,QAHZ;AAAA,UAGsBC,KAHtB,eAGsBA,KAHtB;AAAA,UAG6BC,UAH7B,eAG6BA,UAH7B;AAAA,UAGyCC,IAHzC,eAGyCA,IAHzC;AAAA,UAG+CC,GAH/C,eAG+CA,GAH/C,EAIP;AACA;;AACA,UAAMU,MAAM,GAAG;AAAEf,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA,KAAvB;AAA8BC,MAAAA,UAA9B;AAA0CC,MAAAA,IAA1C;AAAgDC,MAAAA;AAAhD,KAAf,CANO,CAQP;AACA;;AACA,YAAQN,IAAR;AACE;AACA,WAAK,CAAL;AACE,eACE;AACA;AACA;AACA;AACA,8BAAC,eAAD;AACE,YAAA,QAAQ,EAAE,KAAKO,QADjB;AAEE,YAAA,YAAY,EAAE,KAAKG,YAFrB;AAGE,YAAA,MAAM,EAAEM,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;;AAWF,WAAK,CAAL;AACE,eACE;AACA;AACA;AACA;AACA,8BAAC,mBAAD;AACE,YAAA,QAAQ,EAAE,KAAKT,QADjB;AAEE,YAAA,QAAQ,EAAE,KAAKE,QAFjB;AAGE,YAAA,YAAY,EAAE,KAAKC,YAHrB;AAIE,YAAA,MAAM,EAAEM,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;;AAYF,WAAK,CAAL;AACE,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;;AACF,WAAK,CAAL;AACE,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AA9BJ;AAgCD;;AAlF8B;;AAqFjC,eAAelB,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Loads from \"../loads\";\nimport FormUserDetails from \"./formuserdetails\";\nimport FormPersonalDetails from \"./formpersonaldetails\";\n\nclass UserForm extends Component {\n  state = {\n    step: 1,\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    occupation: \"\",\n    city: \"\",\n    bio: \"\"\n  };\n\n  //has a method to proceed to the next step\n  nextStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step + 1\n    });\n  };\n\n  //go back to previous step\n  prevStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step - 1\n    });\n  };\n\n  //handle fields change\n  //each input will have their own state which would be the firstName etc\n  //event parameter attached to it\n  handleChange = input => e => {\n    //take whatever the input is\n    //set it to whatever the value is\n    //we can get that using the event parameter and using target.value\n    //be it firstName, lastName, whatever value is entered\n    this.setState({ [input]: e.target.value });\n  };\n\n  //figure out what step we are on and depending on what step we are on\n  //that's going to decide on which component we want to display\n  render() {\n    //pull the step out of the state by destructuring\n    const { step } = this.state;\n    const { firstName, lastName, email, occupation, city, bio } = this.state;\n    //this is how we can pass the values into the components and\n    //render them into the inputs\n    const values = { firstName, lastName, email, occupation, city, bio };\n\n    //we are making a case for each number so we use a switch instead\n    //of return\n    switch (step) {\n      //case 1 returns the form user details component\n      case 1:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <FormUserDetails\n            nextStep={this.nextStep}\n            handleChange={this.handleChange}\n            values={values}\n          />\n        );\n      case 2:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <FormPersonalDetails\n            nextStep={this.nextStep}\n            prevStep={this.prevStep}\n            handleChange={this.handleChange}\n            values={values}\n          />\n        );\n      case 3:\n        return <h1>Confirm</h1>;\n      case 4:\n        return <h1>Success</h1>;\n    }\n  }\n}\n\nexport default UserForm;\n"]},"metadata":{},"sourceType":"module"}
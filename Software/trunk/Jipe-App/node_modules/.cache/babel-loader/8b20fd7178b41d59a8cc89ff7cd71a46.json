{"ast":null,"code":"var _jsxFileName = \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/userforms/userform.jsx\";\nimport React, { Component } from \"react\";\nimport Loads from \"../loads\";\nimport FormUserDetails from \"./formuserdetails\";\nimport FormPersonalDetails from \"./formpersonaldetails\";\nimport Confirm from \"./confirm\";\nimport Success from \"./success\";\n\nclass UserForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputs: [{\n        step: 1\n      }, {\n        firstName: \"\"\n      }, {\n        lastName: \"\"\n      }, {\n        email: \"\"\n      }, {\n        streetAddress: \"\"\n      }, {\n        apt: \"\"\n      }, {\n        city: \"\"\n      }, {\n        state: \"\"\n      }, {\n        zipCode: \"\"\n      }, {\n        sSN: \"\"\n      }, {\n        drivingLicense: \"\"\n      }, {\n        age: \"\"\n      }]\n    };\n\n    this.nextStep = () => {\n      const step = this.state.step;\n      this.setState({\n        step: step + 1\n      });\n    };\n\n    this.prevStep = () => {\n      const step = this.state.step;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.handleChange = input => e => {\n      //take whatever the input is\n      //set it to whatever the value is\n      //we can get that using the event parameter and using target.value\n      //be it firstName, lastName, whatever value is entered\n      this.setState({\n        [input]: e.target.value\n      });\n    };\n  }\n\n  //figure out what\n  //step we are on and depending on what step we are on\n  //that's going to decide on which component we want to display\n  render() {\n    //pull the step out of the state by destructuring\n    const step = this.state.step;\n    const _this$state = this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          streetAddress = _this$state.streetAddress,\n          email = _this$state.email,\n          apt = _this$state.apt,\n          city = _this$state.city,\n          state = _this$state.state,\n          zipCode = _this$state.zipCode,\n          sSN = _this$state.sSN,\n          drivingLicense = _this$state.drivingLicense,\n          age = _this$state.age; //this is how we can pass the values into the components and\n    //render them into the inputs\n\n    const values = {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age\n    }; //we are making a case for each number so we use a switch instead\n    //of return\n\n    switch (step) {\n      //case 1 returns the form user details component\n      case 1:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(FormUserDetails, {\n            nextStep: this.nextStep,\n            handleChange: this.handleChange,\n            values: values,\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          })\n        );\n\n      case 2:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(FormPersonalDetails, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            handleChange: this.handleChange,\n            values: values,\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          })\n        );\n\n      case 3:\n        return (//it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          React.createElement(Confirm, {\n            nextStep: this.nextStep,\n            prevStep: this.prevStep,\n            values: values,\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          })\n        );\n\n      case 4:\n        return React.createElement(Success, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n    }\n  }\n\n}\n\nconst styles = {\n  button: {\n    margin: 15\n  }\n};\nexport default UserForm;","map":{"version":3,"sources":["/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/userforms/userform.jsx"],"names":["React","Component","Loads","FormUserDetails","FormPersonalDetails","Confirm","Success","UserForm","state","inputs","step","firstName","lastName","email","streetAddress","apt","city","zipCode","sSN","drivingLicense","age","nextStep","setState","prevStep","handleChange","input","e","target","value","render","values","styles","button","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Loads from \"../loads\";\nimport FormUserDetails from \"./formuserdetails\";\nimport FormPersonalDetails from \"./formpersonaldetails\";\nimport Confirm from \"./confirm\";\nimport Success from \"./success\";\n\nclass UserForm extends Component {\n  state = {\n    inputs: [\n      { step: 1 },\n      { firstName: \"\" },\n      { lastName: \"\" },\n      { email: \"\" },\n      { streetAddress: \"\" },\n      { apt: \"\" },\n      { city: \"\" },\n      { state: \"\" },\n      { zipCode: \"\" },\n      { sSN: \"\" },\n      { drivingLicense: \"\" },\n      { age: \"\" },\n    ],\n  };\n\n  //has a method to proceed to the next step\n  nextStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step + 1,\n    });\n  };\n\n  //go back to previous step\n  prevStep = () => {\n    const { step } = this.state;\n    this.setState({\n      step: step - 1,\n    });\n  };\n\n  //handle fields change\n  //each input will have their own state which would be the firstName etc\n  //event parameter attached to it\n  handleChange = (input) => (e) => {\n    //take whatever the input is\n    //set it to whatever the value is\n    //we can get that using the event parameter and using target.value\n    //be it firstName, lastName, whatever value is entered\n    this.setState({ [input]: e.target.value });\n  };\n\n  //figure out what\n  //step we are on and depending on what step we are on\n  //that's going to decide on which component we want to display\n  render() {\n    //pull the step out of the state by destructuring\n    const { step } = this.state;\n    const {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age,\n    } = this.state;\n    //this is how we can pass the values into the components and\n    //render them into the inputs\n    const values = {\n      firstName,\n      lastName,\n      streetAddress,\n      email,\n      apt,\n      city,\n      state,\n      zipCode,\n      sSN,\n      drivingLicense,\n      age,\n    };\n\n    //we are making a case for each number so we use a switch instead\n    //of return\n    switch (step) {\n      //case 1 returns the form user details component\n      case 1:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <FormUserDetails\n            nextStep={this.nextStep}\n            handleChange={this.handleChange}\n            values={values}\n            styles={styles}\n          />\n        );\n      case 2:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <FormPersonalDetails\n            nextStep={this.nextStep}\n            prevStep={this.prevStep}\n            handleChange={this.handleChange}\n            values={values}\n            styles={styles}\n          />\n        );\n      case 3:\n        return (\n          //it will take in a couple of props\n          //when you add attributes to a component,\n          //those are props. We need to do that because we need to access\n          //next step and handle change\n          <Confirm\n            nextStep={this.nextStep}\n            prevStep={this.prevStep}\n            values={values}\n            styles={styles}\n          />\n        );\n      case 4:\n        return <Success />;\n    }\n  }\n}\n\nconst styles = {\n  button: {\n    margin: 15,\n  },\n};\n\nexport default UserForm;\n"]},"metadata":{},"sourceType":"module"}
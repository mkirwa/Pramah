{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropdownContent = exports.DropdownTrigger = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _dropdownTrigger = require('./dropdown-trigger.js');\n\nvar _dropdownTrigger2 = _interopRequireDefault(_dropdownTrigger);\n\nvar _dropdownContent = require('./dropdown-content.js');\n\nvar _dropdownContent2 = _interopRequireDefault(_dropdownContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Dropdown = function (_Component) {\n  _inherits(Dropdown, _Component);\n\n  _createClass(Dropdown, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('click', this._onWindowClick);\n      window.addEventListener('touchstart', this._onWindowClick);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('click', this._onWindowClick);\n      window.removeEventListener('touchstart', this._onWindowClick);\n    }\n  }]);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Dropdown).call(this, props));\n\n    _this.state = {\n      active: false\n    };\n    _this._onWindowClick = _this._onWindowClick.bind(_this);\n    _this._onToggleClick = _this._onToggleClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: 'isActive',\n    value: function isActive() {\n      return typeof this.props.active === 'boolean' ? this.props.active : this.state.active;\n    }\n  }, {\n    key: 'hide',\n    value: function hide() {\n      var _this2 = this;\n\n      this.setState({\n        active: false\n      }, function () {\n        if (_this2.props.onHide) {\n          _this2.props.onHide();\n        }\n      });\n    }\n  }, {\n    key: 'show',\n    value: function show() {\n      var _this3 = this;\n\n      this.setState({\n        active: true\n      }, function () {\n        if (_this3.props.onShow) {\n          _this3.props.onShow();\n        }\n      });\n    }\n  }, {\n    key: '_onWindowClick',\n    value: function _onWindowClick(event) {\n      var dropdownElement = (0, _reactDom.findDOMNode)(this);\n\n      if (event.target !== dropdownElement && !dropdownElement.contains(event.target) && this.isActive()) {\n        this.hide();\n      }\n    }\n  }, {\n    key: '_onToggleClick',\n    value: function _onToggleClick(event) {\n      event.preventDefault();\n\n      if (this.isActive()) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this,\n          _arguments = arguments;\n\n      var _props = this.props;\n      var children = _props.children;\n      var className = _props.className;\n      var disabled = _props.disabled;\n      var removeElement = _props.removeElement; // create component classes\n\n      var active = this.isActive();\n      var dropdownClasses = (0, _classnames2.default)({\n        dropdown: true,\n        'dropdown--active': active,\n        'dropdown--disabled': disabled\n      }); // stick callback on trigger element\n\n      var boundChildren = _react2.default.Children.map(children, function (child) {\n        if (child.type === _dropdownTrigger2.default) {\n          (function () {\n            var originalOnClick = child.props.onClick;\n            child = (0, _react.cloneElement)(child, {\n              ref: 'trigger',\n              onClick: function onClick(event) {\n                if (!disabled) {\n                  _this4._onToggleClick(event);\n\n                  if (originalOnClick) {\n                    originalOnClick.apply(child, _arguments);\n                  }\n                }\n              }\n            });\n          })();\n        } else if (child.type === _dropdownContent2.default && removeElement && !active) {\n          child = null;\n        }\n\n        return child;\n      });\n\n      var cleanProps = _extends({}, this.props);\n\n      delete cleanProps.active;\n      delete cleanProps.onShow;\n      delete cleanProps.onHide;\n      delete cleanProps.removeElement;\n      return _react2.default.createElement('div', _extends({}, cleanProps, {\n        className: dropdownClasses + ' ' + className\n      }), boundChildren);\n    }\n  }]);\n\n  return Dropdown;\n}(_react.Component);\n\nDropdown.propTypes = {\n  disabled: _propTypes2.default.bool,\n  active: _propTypes2.default.bool,\n  onHide: _propTypes2.default.func,\n  onShow: _propTypes2.default.func,\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  removeElement: _propTypes2.default.bool,\n  style: _propTypes2.default.object\n};\nDropdown.defaultProps = {\n  className: ''\n};\nexports.DropdownTrigger = _dropdownTrigger2.default;\nexports.DropdownContent = _dropdownContent2.default;\nexports.default = Dropdown;","map":null,"metadata":{},"sourceType":"script"}
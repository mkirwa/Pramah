{"ast":null,"code":"import _objectSpread from \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/allcomponents.jsx\";\nimport React, { Component } from 'react'; //import the counter component from the folder ./counter\n//this component is used by allcomponents\n\nimport Counter from './counter';\n\nclass Allcomponents extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //instead of hard coding all the counters in the render method\n      //div section, \n      //just use an array instead and render them using the map method\n      //array will have counter objects\n      //add a new property allcomponents\n      // Use this to uniquely identify each\n      //counter\n      allcomponents: [//counter objects\n      //we use id to uniquely identify each counter \n      //value property sets the intial value for each counter\n      {\n        id: 1,\n        value: 4\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }]\n    };\n\n    this.handleIncrement = counter => {\n      //creating a new counters array and giving it\n      //to the set state method and have react update \n      //the state\n      //... this is the spread operator clones \n      //this.state.allcomponents\n      //with these, you will get a new array of counters\n      //the object in the new array(counters) are the same\n      //objects we have in allcomponents\n      const counters = [...this.state.allcomponents];\n      const index = counters.indexOf(counter);\n      counters[index] = _objectSpread({}, counter);\n      counters[index].value++;\n      this.setState({\n        allcomponents: counters\n      });\n    };\n\n    this.handleReset = () => {\n      //this.state.allcomponents - this refers to the existing\n      //counters \n      //we use the map method to get each counter and reset\n      //its value to zero and then return it\n      //this give you a new array of counters\n      //You store them in counters. \n      //\n      const counters = this.state.allcomponents.map(c => {\n        c.value = 0;\n        return c;\n      }); //here you call this.setState with this new array\n\n      this.setState({\n        allcomponents: counters\n      });\n    };\n\n    this.handleDelete = counterId => {\n      const counters = this.state.allcomponents.filter(c => c.id !== counterId);\n      this.setState({\n        allcomponents: counters\n      });\n    };\n  }\n\n  render() {\n    return (//this div is the wrapper or the container for allcomponents\n      //counter -- get each counter and map it to a counter component\n      // set the key property to counter.id\n      //value and selected will be the properties of that props object\n      //key will not be part of that because it is a special attribute\n      //for uniquely identify elements\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleReset,\n        className: \"btn btn-primary btn-sm m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Reset\"), this.state.allcomponents.map(counter => React.createElement(Counter, {\n        key: counter.id,\n        onDelete: this.handleDelete,\n        onIncrement: this.handleIncrement,\n        counter: counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })))\n    );\n  }\n\n}\n\nexport default Allcomponents;","map":{"version":3,"sources":["/Users/mahlonkirwa/Desktop/Project /aands/jipe-app/src/components/allcomponents.jsx"],"names":["React","Component","Counter","Allcomponents","state","allcomponents","id","value","handleIncrement","counter","counters","index","indexOf","setState","handleReset","map","c","handleDelete","counterId","filter","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA8B,OAA9B,C,CACA;AACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAClCG,KADkC,GAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,aAAa,EAAC,CACV;AACA;AACA;AACA;AAAEC,QAAAA,EAAE,EAAC,CAAL;AAAQC,QAAAA,KAAK,EAAC;AAAd,OAJU,EAKV;AAAED,QAAAA,EAAE,EAAC,CAAL;AAAQC,QAAAA,KAAK,EAAC;AAAd,OALU,EAMV;AAAED,QAAAA,EAAE,EAAC,CAAL;AAAQC,QAAAA,KAAK,EAAC;AAAd,OANU,EAOV;AAAED,QAAAA,EAAE,EAAC,CAAL;AAAQC,QAAAA,KAAK,EAAC;AAAd,OAPU;AARV,KAD0B;;AAAA,SAoBlCC,eApBkC,GAoBhBC,OAAO,IAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,QAAQ,GAAG,CAAC,GAAG,KAAKN,KAAL,CAAWC,aAAf,CAAjB;AACA,YAAMM,KAAK,GAAGD,QAAQ,CAACE,OAAT,CAAiBH,OAAjB,CAAd;AACAC,MAAAA,QAAQ,CAACC,KAAD,CAAR,qBAAsBF,OAAtB;AACAC,MAAAA,QAAQ,CAACC,KAAD,CAAR,CAAgBJ,KAAhB;AACA,WAAKM,QAAL,CAAc;AAACR,QAAAA,aAAa,EAAEK;AAAhB,OAAd;AACH,KAlCiC;;AAAA,SAoClCI,WApCkC,GAoCpB,MAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMJ,QAAQ,GAAG,KAAKN,KAAL,CAAWC,aAAX,CAAyBU,GAAzB,CAA6BC,CAAC,IAAE;AAC7CA,QAAAA,CAAC,CAACT,KAAF,GAAU,CAAV;AACA,eAAOS,CAAP;AACH,OAHgB,CAAjB,CARe,CAYf;;AACA,WAAKH,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAEK;AAAjB,OAAd;AACH,KAlDiC;;AAAA,SAoDlCO,YApDkC,GAoDlBC,SAAD,IAAa;AACxB,YAAMR,QAAQ,GAAG,KAAKN,KAAL,CAAWC,aAAX,CAAyBc,MAAzB,CAAgCH,CAAC,IAAIA,CAAC,CAACV,EAAF,KAAQY,SAA7C,CAAjB;AACA,WAAKL,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAEK;AAAjB,OAAd;AACH,KAvDiC;AAAA;;AAyDlCU,EAAAA,MAAM,GAAG;AACL,WACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACA,QAAA,OAAO,EAAE,KAAKN,WADd;AAEA,QAAA,SAAS,EAAC,4BAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAIK,KAAKV,KAAL,CAAWC,aAAX,CAAyBU,GAAzB,CAA6BN,OAAO,IACrC,oBAAC,OAAD;AACI,QAAA,GAAG,EAAEA,OAAO,CAACH,EADjB;AAEI,QAAA,QAAQ,EAAE,KAAKW,YAFnB;AAGI,QAAA,WAAW,EAAE,KAAKT,eAHtB;AAII,QAAA,OAAO,EAAEC,OAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,CAJL;AAPA;AAsBH;;AAhFiC;;AAmFtC,eAAeN,aAAf","sourcesContent":["import React, {Component}from 'react';\n//import the counter component from the folder ./counter\n//this component is used by allcomponents\nimport Counter from './counter';\n\nclass Allcomponents extends Component {\n    state = { \n        //instead of hard coding all the counters in the render method\n        //div section, \n        //just use an array instead and render them using the map method\n        //array will have counter objects\n        //add a new property allcomponents\n        // Use this to uniquely identify each\n        //counter\n        allcomponents:[\n            //counter objects\n            //we use id to uniquely identify each counter \n            //value property sets the intial value for each counter\n            { id:1, value:4 },\n            { id:2, value:0 },\n            { id:3, value:0 },\n            { id:4, value:0 },\n        ]\n     };\n\n    handleIncrement = counter =>{\n        //creating a new counters array and giving it\n        //to the set state method and have react update \n        //the state\n        //... this is the spread operator clones \n        //this.state.allcomponents\n        //with these, you will get a new array of counters\n        //the object in the new array(counters) are the same\n        //objects we have in allcomponents\n        const counters = [...this.state.allcomponents]\n        const index = counters.indexOf(counter);\n        counters[index] = {...counter};\n        counters[index].value++;\n        this.setState({allcomponents: counters});\n    };\n    \n    handleReset = () =>{\n        //this.state.allcomponents - this refers to the existing\n        //counters \n        //we use the map method to get each counter and reset\n        //its value to zero and then return it\n        //this give you a new array of counters\n        //You store them in counters. \n        //\n        const counters = this.state.allcomponents.map(c=>{\n            c.value = 0;\n            return c;\n        });\n        //here you call this.setState with this new array\n        this.setState({ allcomponents: counters})\n    };\n\n    handleDelete = (counterId)=>{\n        const counters = this.state.allcomponents.filter(c => c.id !==counterId);\n        this.setState({ allcomponents: counters})\n    }\n\n    render() { \n        return ( \n        //this div is the wrapper or the container for allcomponents\n        //counter -- get each counter and map it to a counter component\n        // set the key property to counter.id\n        //value and selected will be the properties of that props object\n        //key will not be part of that because it is a special attribute\n        //for uniquely identify elements\n        <div>\n            <button \n            onClick={this.handleReset}\n            className=\"btn btn-primary btn-sm m-2\">Reset</button>\n            {this.state.allcomponents.map(counter => \n            <Counter \n                key={counter.id} \n                onDelete={this.handleDelete} \n                onIncrement={this.handleIncrement}\n                counter={counter}\n                />\n                \n            )}\n        </div> \n        );\n    }\n}\n \nexport default Allcomponents;"]},"metadata":{},"sourceType":"module"}